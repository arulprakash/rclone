
Request    : {:ssl-client-cert nil, :cookies {"JSESSIONID" {:value "mXgwuUIKiS5EaA7XaTMOBYvanm-sxtBgG1Xj7lST"}}, :remote-addr "127.0.0.1", :params {:query "{top_posts{title,description,url,posted_by,posted_in,votes}}"}, :flash nil, :handler-type :undertow, :headers {"host" "0.0.0.0:3000", "user-agent" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36", "cookie" "JSESSIONID=mXgwuUIKiS5EaA7XaTMOBYvanm-sxtBgG1Xj7lST", "referer" "http://0.0.0.0:3000/", "connection" "keep-alive", "pragma" "no-cache", "x-csrf-token" "6YWSwPwf2X6nrhaKIu4pIrMD4sQytZWH8PusgnFXVSQaVWitDQuny1KBruGrJAEqDXNqyXBy9+3wpgQy", "accept" "application/json", "accept-language" "en-US,en;q=0.8,hi;q=0.6,ms;q=0.4,ta;q=0.2", "accept-encoding" "gzip, deflate", "dnt" "1", "cache-control" "no-cache"}, :server-port 3000, :content-length -1, :form-params {}, :server-exchange #object[io.undertow.server.HttpServerExchange 0x1ee07213 "HttpServerExchange{ GET /graphql request {Accept=[application/json], Accept-Language=[en-US,en;q=0.8,hi;q=0.6,ms;q=0.4,ta;q=0.2], Cache-Control=[no-cache], Accept-Encoding=[gzip, deflate], DNT=[1], Pragma=[no-cache], User-Agent=[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36], Connection=[keep-alive], x-csrf-token=[6YWSwPwf2X6nrhaKIu4pIrMD4sQytZWH8PusgnFXVSQaVWitDQuny1KBruGrJAEqDXNqyXBy9+3wpgQy], Cookie=[JSESSIONID=mXgwuUIKiS5EaA7XaTMOBYvanm-sxtBgG1Xj7lST], Referer=[http://0.0.0.0:3000/], Host=[0.0.0.0:3000]} response {Server=[undertow]}}"], :query-params {"query" "{top_posts{title,description,url,posted_by,posted_in,votes}}"}, :content-type nil, :path-info "/graphql", :character-encoding nil, :context "", :uri "/graphql", :server-name "0.0.0.0", :query-string "query=%7Btop_posts%7Btitle%2Cdescription%2Curl%2Cposted_by%2Cposted_in%2Cvotes%7D%7D", :body #object[io.undertow.io.UndertowInputStream 0x4b584d2c "io.undertow.io.UndertowInputStream@4b584d2c"], :multipart-params {}, :scheme :http, :request-method :get, :session nil}
Variables  : {}
Query      : {top_posts{title,description,url,posted_by,posted_in,votes}}
Result     : {:data #ordered/map ([:top_posts nil]), :errors ({:message "Field resolver returned a single value, expected a collection of values.", :locations [{:line 1, :column 0}], :query-path [:top_posts]})}