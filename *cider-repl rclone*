;; Connected to nREPL server - nrepl://localhost:57781
;; CIDER 0.16.0snapshot (package: 20171001.112), nREPL 0.2.12
;; Clojure 1.8.0, Java 1.8.0_112
;;     Docs: (doc function-name)
;;           (find-doc part-of-name)
;;   Source: (source function-name)
;;  Javadoc: (javadoc java-object-or-class)
;;     Exit: <C-c C-q>
;;  Results: Stored in vars *1, *2, *3, an exception in *e;
user> 
edn.datagen> (gen/generate (s/gen int?))
CompilerException java.lang.RuntimeException: No such namespace: gen, compiling:(*cider-repl rclone*:11:14) 
edn.datagen> (gen/generate (s/gen integer?))
CompilerException java.lang.RuntimeException: No such namespace: gen, compiling:(*cider-repl rclone*:13:14) 
edn.datagen> (sgen/generate (s/gen integer?))
83512837
edn.datagen> 
edn.datagen> (gen/sample (s/gen string?))
("" "" "KG" "71" "26L" "Ly3" "jBC" "4lFL38" "j3" "X9Dlq4NH1")
edn.datagen> (length "dsds")
CompilerException java.lang.RuntimeException: Unable to resolve symbol: length in this context, compiling:(*cider-repl rclone*:20:14) 
edn.datagen> (len "dsds")
CompilerException java.lang.RuntimeException: Unable to resolve symbol: len in this context, compiling:(*cider-repl rclone*:22:14) 
edn.datagen> (str/len "dsds")
CompilerException java.lang.RuntimeException: No such namespace: str, compiling:(*cider-repl rclone*:24:14) 
edn.datagen> (count "sadas")
5
edn.datagen> (s/def ::fname (s/and string? #(= (count %) 5)))
:edn.datagen/fname
edn.datagen> (s/valid? ::fname "hello")
true
edn.datagen> (s/valid? ::fname "hellodsd")
false
edn.datagen> (contains? (range 1 5) 5)
IllegalArgumentException contains? not supported on type: clojure.lang.LongRange  clojure.lang.RT.contains (RT.java:814)
edn.datagen> (range 1 5)
(1 2 3 4)
edn.datagen> (contains? '(range 1 5) 5)
IllegalArgumentException contains? not supported on type: clojure.lang.PersistentList  clojure.lang.RT.contains (RT.java:814)
edn.datagen> '(range 1 5)
(range 1 5)
edn.datagen> (list (range 1 5))
((1 2 3 4))
edn.datagen> (contains? '(range 1 5) 5)
IllegalArgumentException contains? not supported on type: clojure.lang.PersistentList  clojure.lang.RT.contains (RT.java:814)
edn.datagen> (contains? (range 1 5) 5)
IllegalArgumentException contains? not supported on type: clojure.lang.LongRange  clojure.lang.RT.contains (RT.java:814)
edn.datagen> #{1 1 2}
IllegalArgumentException Duplicate key: 1  clojure.lang.PersistentHashSet.createWithCheck (PersistentHashSet.java:68)
edn.datagen> #{1 3 2}
#{1 3 2}
edn.datagen> (into #{} range (1 4))
ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  edn.datagen/eval643601 (form-init7372199809194720389.clj:52)
edn.datagen> (into #{} (range 1 6))
#{1 4 3 2 5}
edn.datagen> #{(range 3 9)}
#{(3 4 5 6 7 8)}
edn.datagen> (contains? (into #{} (range 1 4)) 3)
true
edn.datagen> (set (range 1 9))
#{7 1 4 6 3 2 5 8}
CompilerException java.lang.RuntimeException: Unable to resolve symbol: l1 in this context, compiling:(/Users/arul/Projects/Clojure/rclone/resources/edn/datagen.clj:4:1) 
edn.datagen> 
edn.datagen> (has-length? "dsdsfsd" 7)
true
edn.datagen> (has-length? "dsdsfsd" 0)
false
edn.datagen> (has-length? "dsdsfsd" -8)
false
edn.datagen> (has-length? "dsdsfsd" 199899)
false
edn.datagen> (has-length? "dsdsfsd" 1 199899)
true
edn.datagen> (has-length? "dsdsfsd" -9 0)
false
edn.datagen> (has-length? "dsdsfsd" -9 8)
true
edn.datagen> (has-length? "dsdsfsd" 0 8)
true
edn.datagen> (has-length? "dsdsfsd" 0 7)
false
edn.datagen> (has-length? "dsdsfsd" 0 7)
true
edn.datagen> (has-length? "dsdsfsd" 7 7)
true
edn.datagen> (has-length? "dsdsfsd" 7 8)
true
edn.datagen> (s/def ::fname (s/and string? #(has-length? % 7)))
:edn.datagen/fname
edn.datagen> (s/def ::fname (s/and string? #(has-length? % 1 30)))
:edn.datagen/fname
edn.datagen> (s/valid ::fname "Arul Prakash Pugazheni" )
CompilerException java.lang.RuntimeException: No such var: s/valid, compiling:(*cider-repl rclone*:92:14) 
edn.datagen> (s/valid? ::fname "Arul Prakash Pugazheni")
true
edn.datagen> (s/valid? ::fname "Arul Prakash Pugazhendi")
true
edn.datagen> (s/valid? ::fname "Arul Prakash Pugazhenddddddddddddi")
false
edn.datagen> (s/def ::fname (s/and string? #(has-length? % 1 30) (not nil?)))